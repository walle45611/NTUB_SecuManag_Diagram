@startuml Document Category Approval Side Effect
  !theme plain
  skinparam sequenceMessageAlign center
  skinparam maxMessageSize 150

  title 文件類別 (Document Category) Approval Side Effect 流程

  participant Consumer as "approval_approved_callback"
  participant ApprovalSvc as "ApprovalService\n(RabbitMQ)"
  participant DocumentRepo as "DocumentRepository"
  participant Database as "PostgreSQL Database"
  participant DocumentSvc as "DocumentService"
  participant Email as "NotificationService"

  note over Consumer: 從 RabbitMQ 接收到\n"approval.completed.approved"\n消息\nrelated_object_category = "document"

  == 通用處理階段 ==

  Consumer -> ApprovalSvc: handle_side_effects(\napproval, "approved", loop)
  note right: approval_service.py:151

  ApprovalSvc -> ApprovalSvc: _validate_approval(approval)
  note right: 驗證 related_object_category = "document"\n對應到 ApprovalCategory.DOCUMENT

  ApprovalSvc -> ApprovalSvc: _process_signers_for_approval(\napproval, "approved")
  note right: 處理簽核人資訊

  == 文件類別特定處理 ==

  ApprovalSvc -> ApprovalSvc: _handle_approval_side_effects(\napproval, "approved", creator_id, signers, DocumentRepo, loop)
  note right: approval_service.py:108-150

  ApprovalSvc -> DocumentRepo: handle_approved(\napproval, creator_id, signers, "approved")
  note right: document_repository.py:60-99

  DocumentRepo -> DocumentRepo: 驗證文件 ID
  note right: document_id = approval["related_object_id"]\nif document_id is None:\n    raise ValueError("文件 id 不存在")

  DocumentRepo -> Database: CALL system_handle_document_for_approved(\ndocument_id, action_type, approval_id,\nfinal_status, signers)
  note right: document_repository.py:78-97\n執行文件簽核處理

  Database --> DocumentRepo: 成功完成
  note right: 更新文件狀態

  DocumentRepo --> ApprovalSvc: document_id
  note right: 返回原始文件 ID\n(不產生新的文件 ID)

  note over ApprovalSvc: 文件類別不需要風險追蹤\n(跳過 _risk_tracking_logic_service)

  == 文件歸檔階段 ==

  ApprovalSvc -> ApprovalSvc: _document_repo.get_document_archive_ids_by_related_object(\nrelated_object_id, "document")
  note right: approval_service.py:130-135\ndocument_repository.py:33-58

  ApprovalSvc -> Database: SELECT system_get_document_archive_ids_by_related_object(\nrelated_object_id, "document")
  note right: 獲取需要歸檔的文件 ID 列表

  Database --> ApprovalSvc: document_archive_ids: list[UUID]

  ApprovalSvc -> DocumentSvc: archive_document(\ndocument_id, document_archive_ids, "document")
  note right: approval_service.py:137-141

  == 通知與清理階段 ==

  Consumer -> Email: approved_success_notify(\nemail, approval_id)
  note right: approval_approved_callback.py:33-35

  Consumer -> Consumer: queue_service.delete_queue(\napproval_id, loop)
  note right: approval_approved_callback.py:38-39

  Consumer -> Consumer: ch.basic_ack(delivery_tag)
  note right: approval_approved_callback.py:41

  @enduml