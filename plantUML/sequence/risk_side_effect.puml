@startuml Risk Category Approval Side Effect
  !theme plain
  skinparam sequenceMessageAlign center
  skinparam maxMessageSize 150

  title 風險類別 (Risk Category) Approval Side Effect 流程

  participant Consumer as "approval_approved_callback"
  participant ApprovalSvc as "ApprovalService\n(RabbitMQ)"
  participant RiskRepo as "RiskRepository"
  participant Database as "PostgreSQL Database"
  participant RiskTrackSvc as "RiskTrackService"
  participant RiskTrackQueue as "RiskTrackQueueManageService"
  participant DocumentSvc as "DocumentService"
  participant Email as "NotificationService"

  note over Consumer: 從 RabbitMQ 接收到\n"approval.completed.approved"\n消息\nrelated_object_category = "risk"

  == 通用處理階段 ==

  Consumer -> ApprovalSvc: handle_side_effects(\napproval, "approved", loop)
  note right: approval_service.py:151

  ApprovalSvc -> ApprovalSvc: _validate_approval(approval)
  note right: 驗證 related_object_category = "risk"\n對應到 ApprovalCategory.RISK

  ApprovalSvc -> ApprovalSvc: _process_signers_for_approval(\napproval, "approved")
  note right: 處理簽核人資訊

  == 風險類別特定處理 ==

  ApprovalSvc -> ApprovalSvc: _handle_approval_side_effects(\napproval, "approved", creator_id, signers, RiskRepo, loop)
  note right: approval_service.py:108-150

  ApprovalSvc -> RiskRepo: handle_approved(\napproval, creator_id, signers, "approved")
  note right: risk_repository.py:13-66

  RiskRepo -> RiskRepo: 準備文件資訊
  note right: document_id = uuid.uuid4()\ndocument_name = f"{approval_name}_{action_type}_{final_status}_四階證明文件"

  RiskRepo -> Database: CALL isms_handle_calc_risk_and_approval_for_approved(\nrelated_object_id, action_type, related_object_category,\napproval_id, final_status, signers, document_id,\nname, uploadfile_entity_id, creator_id)
  note right: risk_repository.py:35-64\n執行 ISMS 風險計算與簽核處理

  Database --> RiskRepo: document_id
  note right: 返回生成的文件 ID

  RiskRepo --> ApprovalSvc: document_id

  == 風險追蹤特殊處理 ==

  note over ApprovalSvc: 風險類別特有：風險追蹤邏輯

  ApprovalSvc -> RiskTrackSvc: handle_tracking_after_approval(\napproval, loop)
  note right: approval_service.py:125-128\nrisk_track_service.py:85-111

  RiskTrackSvc -> RiskRepo: find_by_id(risk_id)
  note right: risk_repository.py:111-135\n獲取風險資料

  RiskRepo --> RiskTrackSvc: risk data\n{risk_id, parent_id, state, trackable, tracking_days}

  alt risk["trackable"] == True
      RiskTrackSvc -> RiskTrackSvc: _process_risk_tracking_update(\nmessage, loop)
      note right: risk_track_service.py:53-83

      RiskTrackSvc -> RiskRepo: find_by_id(parent_id)
      note right: 獲取父風險資料

      RiskTrackSvc -> RiskTrackSvc: _has_changes(parent_risk, children_risk)
      note right: risk_track_service.py:21-28\n比較追蹤欄位變化

      alt 有追蹤欄位變化
          alt children_risk["trackable"] == False
              RiskTrackSvc -> RiskTrackQueue: delete_queue(risk_id, loop)
              note right: risk_track_service.py:48-51\n刪除追蹤佇列
          else children_risk["trackable"] == True
              RiskTrackSvc -> RiskTrackQueue: delete_queue(risk_id, loop)
              RiskTrackSvc -> RiskTrackQueue: publish(\nrisk_id, tracking_interval_days,\nrisk_trackable, user_ids, loop)
              note right: risk_track_service.py:30-46\n重新發布追蹤佇列
          end
      else 無追蹤欄位變化
          note over RiskTrackSvc: 跳過處理
      end
  else risk["trackable"] == False
      note over RiskTrackSvc: 不需要追蹤，跳過處理
  end

  == 文件歸檔階段 ==

  ApprovalSvc -> ApprovalSvc: _document_repo.get_document_archive_ids_by_related_object(\nrelated_object_id, "risk")
  note right: approval_service.py:130-135

  ApprovalSvc -> DocumentSvc: archive_document(\ndocument_id, document_archive_ids, "risk")
  note right: approval_service.py:137-141

  == 通知與清理階段 ==

  Consumer -> Email: approved_success_notify(\nemail, approval_id)
  note right: approval_approved_callback.py:33-35

  Consumer -> Consumer: queue_service.delete_queue(\napproval_id, loop)
  note right: approval_approved_callback.py:38-39

  Consumer -> Consumer: ch.basic_ack(delivery_tag)
  note right: approval_approved_callback.py:41

  @enduml